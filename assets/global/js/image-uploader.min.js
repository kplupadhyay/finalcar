/*! Image Uploader - v1.2.3 - 26/11/2019
* Copyright (c) 2019 Christian Bayer; Licensed MIT */ !function (e) { e.fn.imageUploader = function (t) { let n, i = { preloaded: [], imagesInputName: "images", preloadedInputName: "preloaded", label: "Drag & Drop files here or click to browse", extensions: [".jpg", ".jpeg", ".png", ".gif", ".svg"], mimes: ["image/jpeg", "image/png", "image/gif", "image/svg+xml"], maxSize: void 0, maxFiles: void 0 }, s = this, a = new DataTransfer; s.settings = {}, s.init = function () { s.settings = e.extend(s.settings, i, t), s.each(function (t, n) { let i = o(); if (e(n).append(i), i.on("dragover", p.bind(i)), i.on("dragleave", p.bind(i)), i.on("drop", r.bind(i)), s.settings.preloaded.length) { i.addClass("has-files"); let a = i.find(".uploaded"); for (let d = 0; d < s.settings.preloaded.length; d++)a.append(l(s.settings.preloaded[d].src, s.settings.preloaded[d].id, !0)) } }) }; let o = function () { let t = e("<div>", { class: "image-uploader" }); n = e("<input>", { type: "file", id: s.settings.imagesInputName + "-" + h(), name: s.settings.imagesInputName + "[]", accept: s.settings.extensions.join(","), multiple: "" }).appendTo(t), e("<div>", { class: "uploaded" }).appendTo(t); let i = e("<div>", { class: "upload-text" }).appendTo(t); return e("<i>", { class: "iui-cloud-upload" }).appendTo(i), e("<span>", { text: s.settings.label }).appendTo(i), t.on("click", function (e) { d(e), n.trigger("click") }), n.on("click", function (e) { e.stopPropagation() }), n.on("change", r.bind(t)), t }, d = function (e) { e.preventDefault(), e.stopPropagation() }, l = function (t, i, o) { let l = e("<div>", { class: "uploaded-image" }), p = (e("<img>", { src: t }).appendTo(l), e("<button>", { class: "delete-image", type: "button" }).appendTo(l)); return e("<i>", { class: "iui-close" }).appendTo(p), o ? (l.attr("data-preloaded", !0), e("<input>", { type: "hidden", name: s.settings.preloadedInputName + "[]", value: i }).appendTo(l)) : l.attr("data-index", i), l.on("click", function (e) { d(e) }), p.on("click", function (t) { d(t); let o = l.parent(); if (!0 === l.data("preloaded")) s.settings.preloaded = s.settings.preloaded.filter(function (e) { return e.id !== i }); else { let p = parseInt(l.data("index")); o.find(".uploaded-image[data-index]").each(function (t, n) { t > p && e(n).attr("data-index", t - 1) }), a.items.remove(p), n.prop("files", a.files) } l.remove(), o.children().length || o.parent().removeClass("has-files") }), l }, p = function (t) { d(t), "dragover" === t.type ? e(this).addClass("drag-over") : e(this).removeClass("drag-over") }, r = function (t) { d(t); let i = e(this), o = Array.from(t.target.files || t.originalEvent.dataTransfer.files), l = []; e(o).each(function (e, t) { s.settings.extensions && !g(t) || s.settings.mimes && !c(t) || s.settings.maxSize && !m(t) || s.settings.maxFiles && !f(l.length, t) || l.push(t) }), l.length ? (i.removeClass("drag-over"), u(i, l)) : n.prop("files", a.files) }, g = function (e) { return !(0 > s.settings.extensions.indexOf(e.name.replace(RegExp("^.*\\."), "."))) || (alert(`The file "${e.name}" does not match with the accepted file extensions: "${s.settings.extensions.join('", "')}"`), !1) }, c = function (e) { return !(0 > s.settings.mimes.indexOf(e.type)) || (alert(`The file "${e.name}" does not match with the accepted mime types: "${s.settings.mimes.join('", "')}"`), !1) }, m = function (e) { return !(e.size > s.settings.maxSize) || (alert(`The file "${e.name}" exceeds the maximum size of ${s.settings.maxSize / 1024 / 1024}Mb`), !1) }, f = function (e, t) { return !(e + a.items.length + s.settings.preloaded.length >= s.settings.maxFiles) || (alert(`The file "${t.name}" could not be added because the limit of ${s.settings.maxFiles} files was reached`), !1) }, u = function (t, n) { t.addClass("has-files"); let i = t.find(".uploaded"), s = t.find('input[type="file"]'); e(n).each(function (e, t) { a.items.add(t), i.append(l(URL.createObjectURL(t), a.items.length - 1), !1) }), s.prop("files", a.files) }, h = function () { return Date.now() + Math.floor(100 * Math.random() + 1) }; return this.init(), this } }(jQuery);